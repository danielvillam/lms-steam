generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Course {
  id              String  @id @default(auto()) @map("_id") @db.ObjectId
  userId          String
  title           String
  description     String?
  imageUrl        String?
  previousSkills  String?
  developedSkills String?
  level           String?
  price           Float?

  isPublished Boolean @default(false)

  categoryId      String?   @db.ObjectId
  category        Category? @relation(fields: [categoryId], references: [id])

  chapters        Chapter[]
  attachments     Attachment[]
  registered      Registration[]

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model Category {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  name            String   @unique
  courses         Course[]
}

model Attachment {
  id              String @id @default(auto()) @map("_id") @db.ObjectId
  name            String
  url             String

  courseId        String @db.ObjectId
  course          Course @relation(fields: [courseId], references: [id])

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model Chapter {
  id              String  @id @default(auto()) @map("_id") @db.ObjectId
  title           String
  description     String?
  videoUrl        String?
  videoTranscript String?
  position        Int
  isPublished     Boolean @default(false)
  isEnabled       Boolean @default(false)

  courseId        String  @db.ObjectId
  course          Course? @relation(fields: [courseId], references: [id])

  userProgress    UserProgress[]

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model UserProgress {
  id              String @id @default(auto()) @map("_id") @db.ObjectId
  userId          String

  chapterId       String  @db.ObjectId
  chapter         Chapter @relation(fields: [chapterId], references: [id])

  isCompleted     Boolean @default(false)

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model Registration {
  id              String @id @default(auto()) @map("_id") @db.ObjectId
  userId          String

  courseId        String @db.ObjectId
  course          Course? @relation(fields: [courseId], references: [id])

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model Event {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  title         String
  userId        String
  description   String?   @db.String
  imageUrl      String?
  startDateTime DateTime
  endDateTime   DateTime
  location      String
  createdAt     DateTime  @default(now())
}